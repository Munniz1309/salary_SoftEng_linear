# -*- coding: utf-8 -*-
"""salary_SoftEng.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CiVDR-JH7N07KjUp_vFwxHO1fTnHHTdS
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor

# Reading the data
df = pd.read_csv('/content/Software Engineer Salaries.csv')

# Displaying the DataFrame
df.head()

# Displaying information about the DataFrame
df.info()

# Displaying descriptive statistics of the DataFrame
df.describe()

# Displaying the unique values of each column individually
for i in df.columns:
  print(i)
  print(df[i].unique())
  print('\n')

# Checking the number of missing values in each column
df.isnull().sum()

# Dropping rows with missing values from the DataFrame
df.dropna(inplace=True)

# Removing "(Glassdoor est.)" and "(Employer est.)" from the 'Salary'
df['Salary'] = df['Salary'].str.replace(r"\s*\(Glassdoor est.\)", "", regex=True)
df['Salary'] = df['Salary'].str.replace(r"\s*\(Employer est.\)", "", regex=True)

# Displaying the DataFrame after modifications
df.head()

# Using regular expressions to extract minimum and maximum salary values from the 'Salary' column
df[['Min_Salary', 'Max_Salary']] = df['Salary'].str.extract(r'(\$[\dK]+)(?: - )?(\$[\dK]+)?', expand=True)

# Filling missing values in the 'Max_Salary' column with the corresponding values from 'Min_Salary'
df['Max_Salary'] = df['Max_Salary'].fillna(df['Min_Salary'])

# Displaying the DataFrame after salary extraction
df.head()

# Converting the values to integers
df['Min_Salary'] = df['Min_Salary'].str.replace('$', '').str.replace('K', '000').astype(int)
df['Max_Salary'] = df['Max_Salary'].str.replace('$', '').str.replace('K', '000').astype(int)

# Displaying descriptive statistics of the updated salary columns
df.describe()

# Dropping the original 'Salary' column since the salaries have been split into minimum and maximum columns
df.drop('Salary', axis=1, inplace=True)

# Dropping the 'Date' column
df.drop('Date', axis=1, inplace=True)

# Displaying the DataFrame after the modifications
df.head()

# Removing outlier
df = df.loc[df['Min_Salary'] > 10000]

# Displaying the DataFrame after the Removing outlier
df.describe()

# Supondo que você tenha um DataFrame chamado df com as colunas 'Company', 'Job Title', 'Location'
df = pd.get_dummies(df, columns=['Company', 'Job Title', 'Location'])

df.head()

#Separando os dados
x = df.drop(['Min_Salary', 'Max_Salary'], axis = 1) # Removed extra brackets
y = df[['Min_Salary', 'Max_Salary']]

#Separe os dados de Treino e Teste
x_train, x_test, y_train, y_test = train_test_split(x, y)

#Criando um Objeto de Regressão Linear
lr = LinearRegression()

#Treine o Modelo
lr.fit(x_train, y_train)

# Avaliando o modelo
y_pred = lr.predict(x_test)

# Calculando o erro quadrático médio (MSE) e o R²
mse = mean_squared_error(y_test, y_pred)
r_sq = lr.score(x, y)


# Exibindo os resultados
print(f"Mean Squared Error (MSE): {mse}")
print('Coeficiente de Determinação (R²):', r_sq)

# Criando um objeto de Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)

# Treinando o modelo
rf.fit(x_train, y_train)

# Avaliando o modelo
y_pred = rf.predict(x_test)

# Calculando o erro quadrático médio (MSE) e o R²
mse = mean_squared_error(y_test, y_pred)
r_sq = lr.score(x, y)


# Exibindo os resultados
print(f"Mean Squared Error (MSE): {mse}")
print('Coeficiente de Determinação (R²):', r_sq)